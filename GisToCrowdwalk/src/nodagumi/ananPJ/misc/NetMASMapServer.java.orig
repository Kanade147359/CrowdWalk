package nodagumi.ananPJ.misc;

import java.beans.XMLDecoder;
import java.beans.XMLEncoder;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.ObjectInputStream;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketTimeoutException;
import java.util.ArrayList;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

import websocket.MyWebSocket;
import websocket.WebSocketData;

import nodagumi.ananPJ.NetmasCuiSimulator;
import nodagumi.ananPJ.misc.NetMASIOHandler;
import nodagumi.ananPJ.misc.CommunicationHandler;

public class NetMASMapServer extends NetMASIOHandler
    implements Serializable {

    MyWebSocket mws = null;

    public NetMASMapServer(
            CommunicationType _type, boolean _isDebug,
            String _addr, int _port,        // network type
            String _path,                   // file type
            byte[] _buffer                  // buffer type
            ) {
        super(_type, _isDebug, _addr, _port, _path, _buffer);
    }

    public void writeStream(String obj) {
        if (getCommunicationType() != CommunicationType.RCV_NETWORK) {
            System.err.println("NetMASMapServer.writeStream writeStream " +
                    "method" + " is valid only rcv network mode.");
            return;
        }
        byte[] buf = null;
        try {
            buf = obj.getBytes("UTF-8");
        } catch (java.io.UnsupportedEncodingException uee) {
            uee.printStackTrace();
        }
        synchronized(linkBuffer) {
            linkBuffer.add(buf);
        }
        System.err.println("NetMASMapServer.writeStream linkBuffer len: " +
                linkBuffer.size());
    }

    @Override
    protected void receiveNetworkRun() {
        try {
            boolean connected = false;
            byte[] sendBuf = null;
            while (true) {
                    if (!connected) {
                        sock = ssock.accept();
                        in = new BufferedInputStream(sock.getInputStream());
                        connected = true;
                    }
                    while ((len = in.read(sbuf, 0 , sbuf.length)) > 0) {
                        System.err.println("NetMASMapServer recieve: " + 
                                new String(sbuf, "UTF-8"));
                        synchronized(linkBuffer) {
                            if (linkBuffer.size() > 0) {
                                sendBuf = linkBuffer.get(0);
                                linkBuffer.remove(0);
                            }
                        }
                    }
                    if (len <= 0) {
                        sock.shutdownInput();
                        in.close();
                        connected = false;
                        byte[] nullByte = null;
                        synchronized(linkBuffer) {
                            linkBuffer.add(nullByte);
                            continue;
                        }
                    }
                    if (sendBuf != null && sendBuf.length > 0) {
                        out = new BufferedOutputStream(sock.getOutputStream());
                        out.write(sendBuf, 0, sendBuf.length);
                        out.flush();
                        sock.shutdownOutput();
                        out.close();
                    }
            }
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }

    @Override
    protected void sendNetworkRun() {
        try {
            boolean connected = false;
            if (getIsDebug()) {
                System.out.println("NetMASIOHandler.sendNetworkRun try to " +
                        "connect(" + addr + ", " + port + ")");
            }
            byte[] sendBuf = null;
            while (true) {
                if (linkBuffer.size() > 0) {
                    synchronized(linkBuffer) {
                        sendBuf = linkBuffer.get(0);
                        linkBuffer.remove(0);
                    }
                    if (!connected) {
                        sock = new Socket(addr, port);
                        out = new BufferedOutputStream(sock.getOutputStream());
                        connected = true;
                    }
                    if ((sock == null) || (getStopFlag())) {
                        break;
                    }
                    out.write(sendBuf, 0, sendBuf.length);
                    System.err.println("NetMASIOHandler.networkRun " +
                            "send len " + sendBuf.length + ".");
                    out.flush();
                    sock.shutdownOutput();
                    out.close();
                    connected = false;
                } else {
                    try {
                        Thread.sleep(50);
                    } catch (InterruptedException ie) {
                        ie.printStackTrace();
                    }
                }
            }
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }
}

