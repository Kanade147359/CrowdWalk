/**
 * build.gradle
 *  generates executable jar using Gradle.
 */

import org.apache.tools.ant.filters.ReplaceTokens

// defaultTasks 'clean', 'build', 'javadoc'
defaultTasks 'clean', 'build'

apply plugin: 'java'
apply plugin: 'eclipse'

// [2016.04.08 I.Noda]
// コンパイル時に VM のバージョンを指定してみる。
// 今のところ、まだうまく動かない。
//targetCompatibility = '1.8' ;
//sourceCompatibility = '1.6' ;

def javaVersion = new Double(sourceCompatibility.toString())
def onlyCuiSimulator = cui.toBoolean()
def vmName = System.getProperty("java.vm.name")

if (javaVersion < 1.8) {
    println "javaVersion ${javaVersion}"
    onlyCuiSimulator = true
}
if (onlyCuiSimulator) {
    println "build mode: onlyCuiSimulator"
} else {
    if (vmName.toLowerCase().indexOf("openjdk") != -1) {
        println "Java Virtual Machine: ${vmName}"
        println "Note: To build with 3D simulator, please use Oracle version JDK."
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile localGroovy()   // Gradleに同梱されているGroovyを使う
    compile 'commons-cli:commons-cli:1.2'
    compile 'commons-codec:commons-codec:1.10'
    compile 'org.apache.xmlgraphics:batik-awt-util:1.8'
    compile 'xalan:xalan:2.7.0'
    compile 'net.arnx:jsonic:1.3.10'
    compile 'net.sf.opencsv:opencsv:2.3'
    compile 'junit:junit:4.12'
    compile 'org.jruby:jruby:9.+'
    compile 'org.osgeo:proj4j:0.1.0'
    compile 'math.geom2d:javaGeom:0.11.1'
    compile 'com.opencsv:opencsv:3.8'
    // https://mvnrepository.com/artifact/org.orbisgis/poly2tri-core
    compile group: 'org.orbisgis', name: 'poly2tri-core', version: '0.1.2'
    // https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
}

sourceSets {
    main {
        java {
            if (onlyCuiSimulator) {
                exclude 'nodagumi/ananPJ/CrowdWalkLauncher.java'
                exclude 'nodagumi/ananPJ/GuiSimulationEditorLauncher.java'
                exclude 'nodagumi/ananPJ/GuiSimulationLauncher.java'
                exclude 'nodagumi/ananPJ/GuiSimulationLauncher2D.java'
                exclude 'nodagumi/ananPJ/GuiSimulationLauncher3D.java'
                exclude 'nodagumi/ananPJ/Settings.java'
                exclude 'nodagumi/ananPJ/ImportGis.java'
                exclude 'nodagumi/ananPJ/Editor/**'
                exclude 'nodagumi/ananPJ/Gui/**'
                exclude 'nodagumi/ananPJ/misc/GetDoublesDialog.java'
                exclude 'nodagumi/ananPJ/misc/GridMapAreaDialog.java'
                exclude 'nodagumi/ananPJ/misc/GsiAccessor.java'
                exclude 'nodagumi/ananPJ/misc/Hover.java'
                exclude 'nodagumi/ananPJ/misc/MapChecker.java'
            } else {
                exclude 'nodagumi/ananPJ/CuiCrowdWalkLauncher.java'
                if (vmName.toLowerCase().indexOf("openjdk") != -1) {
                    exclude 'nodagumi/ananPJ/Editor/EditorCanvas.java'
                    exclude 'nodagumi/ananPJ/Editor/EditorFrameFx.java'
                    exclude 'nodagumi/ananPJ/Editor/MapEditor.java'
                    exclude 'nodagumi/ananPJ/Editor/EditCommand/**'
                    exclude 'nodagumi/ananPJ/Editor/Panel/AreaPanelFx.java'
                    exclude 'nodagumi/ananPJ/Editor/Panel/GroupPanel.java'
                    exclude 'nodagumi/ananPJ/Editor/Panel/LinkPanelFx.java'
                    exclude 'nodagumi/ananPJ/Editor/Panel/NodePanelFx.java'
                    exclude 'nodagumi/ananPJ/Editor/Panel/ScenarioPanelFx.java'
                    exclude 'nodagumi/ananPJ/Editor/Panel/TagSetupPane.java'
                    exclude 'nodagumi/ananPJ/Gui/AgentAppearance/view3d/**'
                    exclude 'nodagumi/ananPJ/Gui/FxColor.java'
                    exclude 'nodagumi/ananPJ/Gui/LinkAppearance3D.java'
                    exclude 'nodagumi/ananPJ/Gui/MapViewFrame.java'
                    exclude 'nodagumi/ananPJ/Gui/NodeAppearance3D.java'
                    exclude 'nodagumi/ananPJ/Gui/SimulationFrame3D.java'
                    exclude 'nodagumi/ananPJ/Gui/SimulationPanel3D.java'
                    exclude 'nodagumi/ananPJ/Gui/SimulationViewController3D.java'
                    exclude 'nodagumi/ananPJ/GuiSimulationLauncher3D.java'
                }
            }
            exclude 'nodagumi/ananPJ/ImportGis.java'
        }
    }
}

def defaultEncoding = 'UTF-8'

compileJava {
    options.encoding = defaultEncoding
//    options.compilerArgs = ['-Xlint:unchecked', '-Xdiags:verbose'] 
    options.compilerArgs = ['-Xdiags:verbose']
}

processResources {
    doFirst {
        // バージョン番号を生成してリソースファイルにセットする
        def version = new File("version.txt").getText().trim()
        def branch = "git rev-parse --abbrev-ref HEAD".execute().text.trim()
        def revision = 0
        "git rev-list HEAD".execute().in.eachLine { revision++ }
        def commit_hash = "git rev-parse --short HEAD".execute().text.trim()

        filesMatching("CrowdWalk.properties") {
            filter(ReplaceTokens, tokens: ['version': version])
            filter(ReplaceTokens, tokens: ['branch': branch])
            filter(ReplaceTokens, tokens: ['revision': "" + revision])
            filter(ReplaceTokens, tokens: ['commit_hash': commit_hash])
        }
        println "    version -> ${version}.${branch}.${revision}-${commit_hash}"
    }
}

jar {
    doFirst {
        /* for ruby */
        tasks.copyRubyLib.execute() ;
    }

    if (onlyCuiSimulator) {
        manifest.mainAttributes("Main-Class" : "nodagumi.ananPJ.CuiCrowdWalkLauncher")
    } else {
        manifest.mainAttributes("Main-Class" : "nodagumi.ananPJ.CrowdWalkLauncher")
    }
    from (configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/*.SF'
        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'
    }

    /* for ruby */
    into('ruby') {
      from('build/ruby')
    }
}

task javadoc(overwrite: true) {
    doLast {
        exec {
            executable "sh"
            args "-c", "./make_javadoc.sh"
        }
    }
}

task clearCache() {
    doFirst {
        File f = file("${System.getProperty("user.home")}/.gradle/cache/${project.group}/${project.name}")
        println("Deleting gradle cache at ${f.absolutePath}")
        delete(f)
    }
}

/* [2015.01.28 I.Noda] gradle でトラブルと、どうもここが怪しい。
 * なので、いざという時、クリアできるようにしておく。
 */
task cleanAll {
     doFirst {
       File f = file("./.gradle") ;
       println("deleting ${f.absolutePath}") ;
       delete(f) ;
     }
}

/* [2017.07.14 I.Noda] ruby のファイルを jar に含める。
 */
task mkdirForRuby {
     doFirst {
       mkdir('build/ruby');
       mkdir('build/ruby/CrowdWalk') ;
     }
}

task copyRubyLib(dependsOn: mkdirForRuby, type: Copy) {
    from 'src/main/ruby'
    into 'build/ruby/CrowdWalk'
}

