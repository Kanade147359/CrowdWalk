var search_data = {"index":{"searchIndex":["agentfactorybase","crowdwalkwrapper","cwirb","itkirb","itkterm","itkutility","networkmap","rubyagentbase","rubycolorbase","rubyeventbase","rubygatebase","top_rubyforcrowdwalk","addagenttag()","addmembertoagenttraillogformatter()","addnth()","addplacetag()","announcealert()","calcaccel()","calccostfromnodevialink()","calcspeed()","callbackagenttraillogmember()","checkagentclass()","checktriggerfilter()","clearalert()","clearallalert()","clearnextlinkcache()","clearroute()","cloneplannedpath()","cycle()","disable()","eachagent()","eachagent()","eachagentonlink()","eachagentonlinkback()","eachagentonlinkfore()","eachlink()","eachlinkwithtag()","eachnode()","eachnodewithtag()","enable()","ensureterm()","finalizesimulation()","fooo()","getagentcolorrgb()","getagentconfig()","getagenthandler()","getagenthandler()","getagentid()","getagentinstanceinruby()","getagentlink()","getagentpos()","getagenttags()","getalerttable()","getarg()","getarray()","getbody()","getcurrentlink()","getcurrentlinkid()","getcurrentspeed()","getcurrenttime()","getcurrenttime()","getemptyspeed()","geteventdef()","geteventdef()","getgatetag()","getgoal()","getgoal()","gethead()","getinstance()","getlinktablebytag()","getmap()","getmap()","getmap()","getnodetablebytag()","getplace()","getplacetags()","getrandom()","getrandom()","getrandomdouble()","getrandomdouble()","getrandomint()","getrandomint()","getroute()","getscenario()","getsimtime()","getsimulator()","getsimulator()","getsimulator()","getsimulator()","getsimulator()","getsimulator()","getsimulator()","getsimulator()","gettags()","hasagenttag()","hasbody()","hasplacetag()","initcycle()","insertroute()","intern()","intern()","intern()","intern()","isagentwalking()","isarray()","isatom()","isclosed()","isfinished()","isnull()","isrubyagent()","launchagentwithroute()","listenalert()","logdebug()","logerror()","logfatal()","loginfo()","logtrace()","logwarn()","logwithlevel()","logwithlevel()","logwithlevel()","logwithlevel()","logwithlevel()","makesymbolterm()","new()","new()","new()","new()","new()","new()","new()","newterm()","numofexitagentsfromnode()","numofpassedagentsovernode()","occur()","placeagent()","postupdate()","preupdate()","preupdate()","prepareforsimulation()","rebuildroutes()","removeagenttag()","runcycle()","runcycle()","savealert()","setarg()","setemptyspeed()","setgoal()","sethead()","setinstance()","setnth()","setturnaround()","setupsimulationloggers()","switchgate()","thinkcycle()","timediffinsec()","toruby()","torubyfromarray()","torubyfromhash()","tryupdateandgenerate()","update()"],"longSearchIndex":["agentfactorybase","crowdwalkwrapper","cwirb","itkirb","itkterm","itkutility","networkmap","rubyagentbase","rubycolorbase","rubyeventbase","rubygatebase","top_rubyforcrowdwalk","rubyagentbase#addagenttag()","crowdwalkwrapper#addmembertoagenttraillogformatter()","itkterm::addnth()","rubyagentbase#addplacetag()","rubyagentbase#announcealert()","rubyagentbase#calcaccel()","rubyagentbase#calccostfromnodevialink()","rubyagentbase#calcspeed()","crowdwalkwrapper#callbackagenttraillogmember()","itkutility#checkagentclass()","rubyagentbase::checktriggerfilter()","rubyagentbase#clearalert()","rubyagentbase#clearallalert()","rubyagentbase#clearnextlinkcache()","rubyagentbase#clearroute()","agentfactorybase#cloneplannedpath()","agentfactorybase#cycle()","agentfactorybase#disable()","cwirb#eachagent()","itkirb#eachagent()","itkutility#eachagentonlink()","itkutility#eachagentonlinkback()","itkutility#eachagentonlinkfore()","networkmap#eachlink()","networkmap#eachlinkwithtag()","networkmap#eachnode()","networkmap#eachnodewithtag()","agentfactorybase#enable()","itkterm::ensureterm()","crowdwalkwrapper#finalizesimulation()","itkutility#fooo()","rubycolorbase#getagentcolorrgb()","agentfactorybase#getagentconfig()","cwirb#getagenthandler()","itkirb#getagenthandler()","rubyagentbase#getagentid()","itkutility#getagentinstanceinruby()","rubycolorbase#getagentlink()","rubycolorbase#getagentpos()","rubyagentbase#getagenttags()","rubyagentbase#getalerttable()","itkterm::getarg()","itkterm::getarray()","itkterm::getbody()","rubyagentbase#getcurrentlink()","rubyagentbase#getcurrentlinkid()","rubyagentbase#getcurrentspeed()","agentfactorybase#getcurrenttime()","rubyagentbase#getcurrenttime()","rubyagentbase#getemptyspeed()","rubyeventbase#geteventdef()","rubygatebase#geteventdef()","rubygatebase#getgatetag()","agentfactorybase#getgoal()","rubyagentbase#getgoal()","itkterm::gethead()","crowdwalkwrapper::getinstance()","agentfactorybase#getlinktablebytag()","cwirb#getmap()","itkirb#getmap()","rubygatebase#getmap()","agentfactorybase#getnodetablebytag()","rubygatebase#getplace()","rubyagentbase#getplacetags()","crowdwalkwrapper::getrandom()","itkutility#getrandom()","crowdwalkwrapper::getrandomdouble()","itkutility#getrandomdouble()","crowdwalkwrapper::getrandomint()","itkutility#getrandomint()","rubyagentbase#getroute()","agentfactorybase#getscenario()","agentfactorybase#getsimtime()","agentfactorybase#getsimulator()","crowdwalkwrapper#getsimulator()","cwirb#getsimulator()","itkirb#getsimulator()","itkutility#getsimulator()","rubyagentbase#getsimulator()","rubyeventbase#getsimulator()","rubygatebase#getsimulator()","agentfactorybase#gettags()","rubyagentbase#hasagenttag()","itkterm::hasbody()","rubyagentbase#hasplacetag()","agentfactorybase#initcycle()","rubyagentbase#insertroute()","crowdwalkwrapper#intern()","crowdwalkwrapper::intern()","itkterm::intern()","rubyagentbase#intern()","agentfactorybase#isagentwalking()","itkterm::isarray()","itkterm::isatom()","rubygatebase#isclosed()","agentfactorybase#isfinished()","itkterm::isnull()","itkutility#isrubyagent()","agentfactorybase#launchagentwithroute()","rubyagentbase#listenalert()","itkutility#logdebug()","itkutility#logerror()","itkutility#logfatal()","itkutility#loginfo()","itkutility#logtrace()","itkutility#logwarn()","crowdwalkwrapper#logwithlevel()","itkutility#logwithlevel()","rubyagentbase#logwithlevel()","rubyeventbase#logwithlevel()","rubygatebase#logwithlevel()","agentfactorybase#makesymbolterm()","agentfactorybase::new()","crowdwalkwrapper::new()","networkmap::new()","rubyagentbase::new()","rubycolorbase::new()","rubyeventbase::new()","rubygatebase::new()","itkterm::newterm()","itkutility#numofexitagentsfromnode()","itkutility#numofpassedagentsovernode()","rubyeventbase#occur()","agentfactorybase#placeagent()","crowdwalkwrapper#postupdate()","crowdwalkwrapper#preupdate()","rubyagentbase#preupdate()","crowdwalkwrapper#prepareforsimulation()","crowdwalkwrapper#rebuildroutes()","rubyagentbase#removeagenttag()","cwirb#runcycle()","itkirb#runcycle()","rubyagentbase#savealert()","itkterm::setarg()","rubyagentbase#setemptyspeed()","rubyagentbase#setgoal()","itkterm::sethead()","crowdwalkwrapper::setinstance()","itkterm::setnth()","rubyagentbase#setturnaround()","crowdwalkwrapper#setupsimulationloggers()","rubygatebase#switchgate()","rubyagentbase#thinkcycle()","agentfactorybase#timediffinsec()","itkterm::toruby()","itkterm::torubyfromarray()","itkterm::torubyfromhash()","agentfactorybase#tryupdateandgenerate()","rubyagentbase#update()"],"info":[["AgentFactoryBase","","AgentFactoryBase.html","",""],["CrowdWalkWrapper","","CrowdWalkWrapper.html","","<p>CrowdWalk の EvacuationSimulator の制御のwrapper の base class。\n<p>シミュレーションのメインルーチンのうち、 以下に上げる method ポイントで、一旦 …\n"],["CwIrb","","CwIrb.html","","<p>Irb Utility module for CrowdWalk.\n<p>CrowdWalk を、irb で対話的に制御する機能を提供する。\n<p>irb 対話モードで CrowdWalk を起動するには、 property設定ファイル(*.prop.json)において、以下のように設定する。 …\n"],["ItkIrb","","ItkIrb.html","","<p>Irb Utility module for CrowdWalk\n"],["ItkTerm","","ItkTerm.html","","<p>Java における nodagumi.Itk.Term に対応するクラス。\n"],["ItkUtility","","ItkUtility.html","","<p>汎用ユーティリティ\n"],["NetworkMap","","NetworkMap.html","","<p>シミュレーションで用いる地図(NetworkMap)のJava Objectへのアクセスを 管理する。\n"],["RubyAgentBase","","RubyAgentBase.html","","<p>CrowdWalk の RubyAgent に対応する Ruby 側の AgentBase。\n<p>Ruby で行動制御しながら動くエージェントを実現するためのベースクラス。 Java 側の RubyAgent …\n"],["RubyColorBase","","RubyColorBase.html","","<p>CrowdWalk の Agent Appearance の色ぎめインターフェース。\n<p><strong>“*.prop.json”</strong>\n\n<pre>...\n&quot;agent_appearance_file&quot;:&quot;sample.agentApp.json&quot;, ...</pre>\n"],["RubyEventBase","","RubyEventBase.html","","<p>CrowdWalk の RubyEvent での Ruby 側の制御のインターフェース。\n<p>シナリオ設定ファイル(“*.scnr.json”)に記述するイベントの制御を、 Ruby で記述することを可能とする。 …\n"],["RubyGateBase","","RubyGateBase.html","","<p>CrowdWalk の RubyGate での Ruby 側の制御のインターフェース。\n<p>シナリオ設定ファイル(“*.scnr.json”)に記述するCloseGateイベントの制御を、 …\n"],["Top_RubyForCrowdWalk","","Top_RubyForCrowdWalk.html","","<p>Ruby Facilities for CrowdWalk\n<p>Author:: Itsuki Noda noda50@gmail.com\n<p>Copyright:: Copyright © 2020 AIST …\n"],["addAgentTag","RubyAgentBase","RubyAgentBase.html#method-i-addAgentTag","(tag)","<p>エージェントのタグを追加\n"],["addMemberToAgentTrailLogFormatter","CrowdWalkWrapper","CrowdWalkWrapper.html#method-i-addMemberToAgentTrailLogFormatter","(name)","<p>シミュレーションの AgentTrailLog の Format Member の追加。\n<p><em>name</em>  &mdash; name of the Format Member.\n<p><em>block</em>  &mdash; a procedure to generage …\n"],["addNth","ItkTerm","ItkTerm.html#method-c-addNth","(object, value)","<p>配列要素追加\n<p><em>object</em>  &mdash; Java の Itk.Term\n<p><em>value</em>  &mdash; データ。\n"],["addPlaceTag","RubyAgentBase","RubyAgentBase.html#method-i-addPlaceTag","(tag)","<p>現在地のリンクにタグを追加\n"],["announceAlert","RubyAgentBase","RubyAgentBase.html#method-i-announceAlert","(message)","<p>アラートを現在地にアナウンス。\n"],["calcAccel","RubyAgentBase","RubyAgentBase.html#method-i-calcAccel","(baseSpeed, previousSpeed)","<p>加速度を計算する。\n<p><em>baseSpeed</em> &mdash; 自由速度。\n<p><em>previousSpeed</em> &mdash; 前のサイクルの速度。\n"],["calcCostFromNodeViaLink","RubyAgentBase","RubyAgentBase.html#method-i-calcCostFromNodeViaLink","(way, node, target)","<p>あるwayを選択した場合の目的地(_target)までのコスト。\n<p><em>way</em> &mdash; 現在進もうとしている道\n<p><em>node</em> &mdash; 現在の分岐点\n"],["calcSpeed","RubyAgentBase","RubyAgentBase.html#method-i-calcSpeed","(previousSpeed)","<p>速度を計算する。\n<p><em>previousSpeed</em> &mdash; 前のサイクルの速度。\n\n<p><strong>return</strong> 速度。\n"],["callbackAgentTrailLogMember","CrowdWalkWrapper","CrowdWalkWrapper.html#method-i-callbackAgentTrailLogMember","(name, agent, currentTime, handler)","<p>AgentTrailLog の Format Member からの呼び戻し。\n<p><em>name</em>  &mdash; name of the Format Member.\n<p><em>agent</em>  &mdash; agent object in Java.\n"],["checkAgentClass","ItkUtility","ItkUtility.html#method-i-checkAgentClass","(agent, classTag)","<p>Agent クラスチェック\n"],["checkTriggerFilter","RubyAgentBase","RubyAgentBase.html#method-c-checkTriggerFilter","(methodName)","<p>RubyAgentBase を継承するクラスにおいて、TriggerFilter に methodName  含まれているかをチェックする。 このクラスメソッドが true を返すもののみ、 java …\n"],["clearAlert","RubyAgentBase","RubyAgentBase.html#method-i-clearAlert","(message)","<p>現在Agent自身が保持している message を消去する。\n"],["clearAllAlert","RubyAgentBase","RubyAgentBase.html#method-i-clearAllAlert","()","<p>現在Agent自身が保持している全 message を消去する。\n"],["clearNextLinkCache","RubyAgentBase","RubyAgentBase.html#method-i-clearNextLinkCache","()","<p>nextLinkCache をクリアしておく。 thinkCycle() などで、goal や link の長さなどを一時的に変更した際、 間違って直前の nextLinkCache を参照しないようにするために使う。 …\n"],["clearRoute","RubyAgentBase","RubyAgentBase.html#method-i-clearRoute","()","<p>ルートのクリア\n"],["clonePlannedPath","AgentFactoryBase","AgentFactoryBase.html#method-i-clonePlannedPath","()","<p>エージェントに設定する経路を返す。 必要に応じて、子クラスで定義。\n"],["cycle","AgentFactoryBase","AgentFactoryBase.html#method-i-cycle","()","<p>各 シミュレーション cycle のエージェント生成のフェーズで呼び出される。 ただし、この生成ルールが enable されている時のみに呼び出しがある。 disable されると、呼び出されなくなる。 …\n"],["disable","AgentFactoryBase","AgentFactoryBase.html#method-i-disable","()","<p>生成ルールを無効化する。\n"],["eachAgent","CwIrb","CwIrb.html#method-i-eachAgent","(status = :all)","<p>call a <em>block</em> with each agent.\n<p><em>status</em> &mdash; specify type of agents. :all or :walking.\n\n"],["eachAgent","ItkIrb","ItkIrb.html#method-i-eachAgent","(status = :all, &block)","<p>do something for each agent.\n"],["eachAgentOnLink","ItkUtility","ItkUtility.html#method-i-eachAgentOnLink","(link, &block)","<p>全エージェント。\n"],["eachAgentOnLinkBack","ItkUtility","ItkUtility.html#method-i-eachAgentOnLinkBack","(link, &block)","<p>前向きレーンのエージェント。\n"],["eachAgentOnLinkFore","ItkUtility","ItkUtility.html#method-i-eachAgentOnLinkFore","(link, &block)","<p>前向きレーンのエージェント。\n"],["eachLink","NetworkMap","NetworkMap.html#method-i-eachLink","()","<p>全リンクに対し、指定した処理を行う。\n"],["eachLinkWithTag","NetworkMap","NetworkMap.html#method-i-eachLinkWithTag","(tag)","<p>あるタグを持つリンクに対し、ある処理を行う。\n<p><em>tag</em> &mdash; このタグを持つリンクのみが取り出される。\n\n"],["eachNode","NetworkMap","NetworkMap.html#method-i-eachNode","()","<p>全ノードに対し、指定した処理を行う。\n"],["eachNodeWithTag","NetworkMap","NetworkMap.html#method-i-eachNodeWithTag","(tag)","<p>あるタグを持つノードに対し、ある処理を行う。\n<p><em>tag</em> &mdash; このタグを持つノードのみが取り出される。\n\n"],["enable","AgentFactoryBase","AgentFactoryBase.html#method-i-enable","()","<p>生成ルールを有効化する。\n"],["ensureTerm","ItkTerm","ItkTerm.html#method-c-ensureTerm","(value)","<p>確実に Term にする。\n"],["finalizeSimulation","CrowdWalkWrapper","CrowdWalkWrapper.html#method-i-finalizeSimulation","()","<p>シミュレーション終了後の処理 EvacuationSimulator の finalize() で呼び出される。\n"],["fooo","ItkUtility","ItkUtility.html#method-i-fooo","()",""],["getAgentColorRGB","RubyColorBase","RubyColorBase.html#method-i-getAgentColorRGB","(agent)","<p>RGBで色を返す。\n"],["getAgentConfig","AgentFactoryBase","AgentFactoryBase.html#method-i-getAgentConfig","()","<p>エージェント設定 config を返す。 必要に応じて、子クラスで定義。\n"],["getAgentHandler","CwIrb","CwIrb.html#method-i-getAgentHandler","()","<p>get CrowdWalk simulator entity.\n<p><strong>return</strong> &mdash; Java Object of agent handler in CrowdWalk.\n\n"],["getAgentHandler","ItkIrb","ItkIrb.html#method-i-getAgentHandler","()","<p>get CrowdWalk simulator entity\n"],["getAgentId","RubyAgentBase","RubyAgentBase.html#method-i-getAgentId","()","<p>エージェント id\n"],["getAgentInstanceInRuby","ItkUtility","ItkUtility.html#method-i-getAgentInstanceInRuby","(agent)","<p>Ruby Agent の場合に、そのインスタンスを取得。\n"],["getAgentLink","RubyColorBase","RubyColorBase.html#method-i-getAgentLink","(agent)","<p>get link (MapLink) where the agent exist.\n"],["getAgentPos","RubyColorBase","RubyColorBase.html#method-i-getAgentPos","(agent)","<p>get pos [x,y,z] where the agent exist.\n"],["getAgentTags","RubyAgentBase","RubyAgentBase.html#method-i-getAgentTags","()","<p>エージェントのタグリスト\n"],["getAlertTable","RubyAgentBase","RubyAgentBase.html#method-i-getAlertTable","()","<p>アラートテーブル\n"],["getArg","ItkTerm","ItkTerm.html#method-c-getArg","(object, slot)","<p>本体スロット取得\n"],["getArray","ItkTerm","ItkTerm.html#method-c-getArray","(object)","<p>配列取得\n"],["getBody","ItkTerm","ItkTerm.html#method-c-getBody","(object)","<p>本体取得\n"],["getCurrentLink","RubyAgentBase","RubyAgentBase.html#method-i-getCurrentLink","()","<p>現在地のリンク\n"],["getCurrentLinkId","RubyAgentBase","RubyAgentBase.html#method-i-getCurrentLinkId","()","<p>現在地のリンク ID\n"],["getCurrentSpeed","RubyAgentBase","RubyAgentBase.html#method-i-getCurrentSpeed","()","<p>速度\n"],["getCurrentTime","AgentFactoryBase","AgentFactoryBase.html#method-i-getCurrentTime","()","<p>現在時刻の取得。\n<p><strong>return</strong>  &mdash; 現在時刻。SimTime のインスタンス\n\n"],["getCurrentTime","RubyAgentBase","RubyAgentBase.html#method-i-getCurrentTime","()","<p>現在時刻\n"],["getEmptySpeed","RubyAgentBase","RubyAgentBase.html#method-i-getEmptySpeed","()","<p>自由速度\n"],["getEventDef","RubyEventBase","RubyEventBase.html#method-i-getEventDef","()","<p>イベント定義取得。 Itk::Term の形で返す。 なので、ItkTerm.getArg(obj, slot) などで変換。 さらに、ItkTerm.toRuby(value) で ruby object …\n"],["getEventDef","RubyGateBase","RubyGateBase.html#method-i-getEventDef","()","<p>イベント定義取得。 Itk::Term の形で返す。 なので、ItkTerm.getArg(obj, slot) などで変換。 さらに、ItkTerm.toRuby(value) で ruby object …\n"],["getGateTag","RubyGateBase","RubyGateBase.html#method-i-getGateTag","()","<p>イベント定義取得\n"],["getGoal","AgentFactoryBase","AgentFactoryBase.html#method-i-getGoal","()","<p>エージェントに設定する目的地を返す。 必要に応じて、子クラスで定義。\n"],["getGoal","RubyAgentBase","RubyAgentBase.html#method-i-getGoal","()","<p>目的地\n"],["getHead","ItkTerm","ItkTerm.html#method-c-getHead","(object)","<p>ヘッド取得\n"],["getInstance","CrowdWalkWrapper","CrowdWalkWrapper.html#method-c-getInstance","()","<p>Wrapper の（唯一の）インスタンスへのアクセス。\n"],["getLinkTableByTag","AgentFactoryBase","AgentFactoryBase.html#method-i-getLinkTableByTag","(tag)","<p>tag で指定されたリンクの取得。\n<p><em>tag</em>  &mdash; tag を表す Term。 makeSymbolTerm() で作成されるべき。\n<p><strong>return</strong>  &mdash; リンクのリスト(MapLinkTable)\n"],["getMap","CwIrb","CwIrb.html#method-i-getMap","()","<p>get CrowdWalk simulator entity.\n<p><strong>return</strong> &mdash; Ruby Object of agent as an instance of NetworkMap.\n\n"],["getMap","ItkIrb","ItkIrb.html#method-i-getMap","()","<p>get CrowdWalk simulator entity\n"],["getMap","RubyGateBase","RubyGateBase.html#method-i-getMap","()","<p>イベント定義取得\n"],["getNodeTableByTag","AgentFactoryBase","AgentFactoryBase.html#method-i-getNodeTableByTag","(tag)","<p>tag で指定されたノードの取得。\n<p><em>tag</em>  &mdash; tag を表す Term。 makeSymbolTerm() で作成されるべき。\n<p><strong>return</strong>  &mdash; ノードのリスト(MapLinkTable)\n"],["getPlace","RubyGateBase","RubyGateBase.html#method-i-getPlace","()","<p>場所取得\n"],["getPlaceTags","RubyAgentBase","RubyAgentBase.html#method-i-getPlaceTags","()","<p>現在地のリンクのタグリスト\n"],["getRandom","CrowdWalkWrapper","CrowdWalkWrapper.html#method-c-getRandom","()","<p>Java 側の乱数生成器へのアクセス。\n"],["getRandom","ItkUtility","ItkUtility.html#method-i-getRandom","()","<p>Java 側の乱数生成器へのアクセス。\n"],["getRandomDouble","CrowdWalkWrapper","CrowdWalkWrapper.html#method-c-getRandomDouble","()","<p>Java 側の乱数生成で、int 取得。\n"],["getRandomDouble","ItkUtility","ItkUtility.html#method-i-getRandomDouble","()","<p>Java 側の乱数生成で、int 取得。\n"],["getRandomInt","CrowdWalkWrapper","CrowdWalkWrapper.html#method-c-getRandomInt","(mode = nil)","<p>Java 側の乱数生成で、int 取得。\n"],["getRandomInt","ItkUtility","ItkUtility.html#method-i-getRandomInt","(mode = nil)","<p>Java 側の乱数生成で、int 取得。\n"],["getRoute","RubyAgentBase","RubyAgentBase.html#method-i-getRoute","(future = true)","<p>ルート取得\n<p><em>future</em>  &mdash; 今後のルートのみの場合。\n\n"],["getScenario","AgentFactoryBase","AgentFactoryBase.html#method-i-getScenario","()","<p>scenario object (Java) を取得。\n<p><strong>return</strong>  &mdash; scenario\n\n"],["getSimTime","AgentFactoryBase","AgentFactoryBase.html#method-i-getSimTime","(timeStr)","<p>get SimTime object\n<p><em>timeStr</em>  &mdash; 時刻を表す文字列 (“HH:MM:SS”) ;\n<p><strong>return</strong>  &mdash; SimTime のインスタンス。\n"],["getSimulator","AgentFactoryBase","AgentFactoryBase.html#method-i-getSimulator","()","<p>simulator object (Java) を取得。\n<p><strong>return</strong>  &mdash; simulator\n\n"],["getSimulator","CrowdWalkWrapper","CrowdWalkWrapper.html#method-i-getSimulator","()","<p>シミュレータ取得。\n"],["getSimulator","CwIrb","CwIrb.html#method-i-getSimulator","()","<p>get CrowdWalk simulator entity.\n<p><strong>return</strong> &mdash; Java Object of the CrowdWalk simulator.\n\n"],["getSimulator","ItkIrb","ItkIrb.html#method-i-getSimulator","()","<p>get CrowdWalk simulator entity\n"],["getSimulator","ItkUtility","ItkUtility.html#method-i-getSimulator","()","<p>Simulator オブジェクトの取得。各クラスで再定義必要。\n"],["getSimulator","RubyAgentBase","RubyAgentBase.html#method-i-getSimulator","()","<p>シミュレータ(java)へのアクセス\n"],["getSimulator","RubyEventBase","RubyEventBase.html#method-i-getSimulator","()","<p>イベント定義取得\n"],["getSimulator","RubyGateBase","RubyGateBase.html#method-i-getSimulator","()","<p>イベント定義取得\n"],["getTags","AgentFactoryBase","AgentFactoryBase.html#method-i-getTags","()","<p>エージェントに初期に設定するタグのリストを返す。 必要に応じて、子クラスで定義。\n"],["hasAgentTag","RubyAgentBase","RubyAgentBase.html#method-i-hasAgentTag","(tag)","<p>エージェントのタグを持つかどうか\n"],["hasBody","ItkTerm","ItkTerm.html#method-c-hasBody","(object)","<p>arg 部分を持つかどうか\n"],["hasPlaceTag","RubyAgentBase","RubyAgentBase.html#method-i-hasPlaceTag","(tag)","<p>現在地のリンクのタグをチェック\n"],["initCycle","AgentFactoryBase","AgentFactoryBase.html#method-i-initCycle","()","<p>最初の呼び出しの際の初期化。 インスタンスが作られた際には、まだ、simulator とかがバインド されていないので、マップなどを使う初期化はこちらで行う。\n"],["insertRoute","RubyAgentBase","RubyAgentBase.html#method-i-insertRoute","(newRoute, clearP = false)","<p>ルートへの挿入。\n<p><em>newRoute</em>  &mdash; 挿入する今後のルート。中継点のタグもしくはタグリスト。\n<p><em>clearP</em>  &mdash; 挿入前にクリアするかどうか。 true なら、setRoute のような動き。\n"],["intern","CrowdWalkWrapper","CrowdWalkWrapper.html#method-i-intern","(str)","<p>文字列の java 内でのintern.\n"],["intern","CrowdWalkWrapper","CrowdWalkWrapper.html#method-c-intern","(str)","<p>文字列の java 内でのintern.\n"],["intern","ItkTerm","ItkTerm.html#method-c-intern","(string)",""],["intern","RubyAgentBase","RubyAgentBase.html#method-i-intern","(str)","<p>文字列の java 内でのintern.\n"],["isAgentWalking","AgentFactoryBase","AgentFactoryBase.html#method-i-isAgentWalking","(agent)","<p>エージェントが歩いているかどうか。\n<p><em>agent</em>  &mdash; 調べるエージェント。\n<p><strong>return</strong>  &mdash; まだ生きていれば（歩いていれば）true。\n"],["isArray","ItkTerm","ItkTerm.html#method-c-isArray","(object)","<p>array かどうか\n"],["isAtom","ItkTerm","ItkTerm.html#method-c-isAtom","(object)","<p>atom タイプチェック\n"],["isClosed","RubyGateBase","RubyGateBase.html#method-i-isClosed","(agent, currentTime)","<p>エージェント通過チェック。\n"],["isFinished","AgentFactoryBase","AgentFactoryBase.html#method-i-isFinished","()","<p>終了しているかどうかの確認。 シミュレーションの終了チェック（全生成ルールが終わっているかのチェック）で 予備出される。\n"],["isNull","ItkTerm","ItkTerm.html#method-c-isNull","(object)","<p>null タイプチェック\n"],["isRubyAgent","ItkUtility","ItkUtility.html#method-i-isRubyAgent","(agent)","<p>Ruby Agent クラスチェック\n"],["launchAgentWithRoute","AgentFactoryBase","AgentFactoryBase.html#method-i-launchAgentWithRoute","(agentClassName, startPlace, goalTag, route, fallback = nil)","<p>エージェント生成。\n<p><em>agentClassName</em>  &mdash; class name の文字列\n<p><em>startPlace</em>  &mdash; 出発地点(MapLink or MapNode)\n"],["listenAlert","RubyAgentBase","RubyAgentBase.html#method-i-listenAlert","(message)","<p>アラートを聴いた時刻。 聴いていなければ、nilが返る。\n<p><em>message</em>  &mdash; アラートメッセージ。文字列もしくは Itk.Term.\n\n<p><strong>return</strong> 時刻もしくは nil\n"],["logDebug","ItkUtility","ItkUtility.html#method-i-logDebug","(label, *data)","<p>Itkのloggerによるログ出力(debug)\n<p><em>label</em>  &mdash; ログのラベル。nil なら、Agent ID などに置き換えられる。\n<p>_*data_  &mdash; データの並び。\n"],["logError","ItkUtility","ItkUtility.html#method-i-logError","(label, *data)","<p>Itkのloggerによるログ出力(error)\n<p><em>label</em>  &mdash; ログのラベル。nil なら、Agent ID などに置き換えられる。\n<p>_*data_  &mdash; データの並び。\n"],["logFatal","ItkUtility","ItkUtility.html#method-i-logFatal","(label, *data)","<p>Itkのloggerによるログ出力(fatal)\n<p><em>label</em>  &mdash; ログのラベル。nil なら、Agent ID などに置き換えられる。\n<p>_*data_  &mdash; データの並び。\n"],["logInfo","ItkUtility","ItkUtility.html#method-i-logInfo","(label, *data)","<p>Itkのloggerによるログ出力(info)\n<p><em>label</em>  &mdash; ログのラベル。nil なら、Agent ID などに置き換えられる。\n<p>_*data_  &mdash; データの並び。\n"],["logTrace","ItkUtility","ItkUtility.html#method-i-logTrace","(label, *data)","<p>Itkのloggerによるログ出力(trace)\n<p><em>label</em>  &mdash; ログのラベル。nil なら、Agent ID などに置き換えられる。\n<p>_*data_  &mdash; データの並び。\n"],["logWarn","ItkUtility","ItkUtility.html#method-i-logWarn","(label, *data)","<p>Itkのloggerによるログ出力(warn)\n<p><em>label</em>  &mdash; ログのラベル。nil なら、Agent ID などに置き換えられる。\n<p>_*data_  &mdash; データの並び。\n"],["logWithLevel","CrowdWalkWrapper","CrowdWalkWrapper.html#method-i-logWithLevel","(level, label, *data)","<p>Itkのloggerによるログ出力. ItkUtility のものを override.\n<p><em>level</em>  &mdash; ログレベル。:trace, :debug, :info, :warn, :error, :fatal …\n"],["logWithLevel","ItkUtility","ItkUtility.html#method-i-logWithLevel","(level, label, *data)","<p>Itkのloggerによるログ出力\n<p><em>level</em>  &mdash; ログレベル。:trace, :debug, :info, :warn, :error, :fatal\n<p><em>label</em>  &mdash; ログのラベル。nil なら、Agent …\n"],["logWithLevel","RubyAgentBase","RubyAgentBase.html#method-i-logWithLevel","(level, label, *data)","<p>Itkのloggerによるログ出力. ItkUtility のものを override.\n<p><em>level</em>  &mdash; ログレベル。:trace, :debug, :info, :warn, :error, :fatal …\n"],["logWithLevel","RubyEventBase","RubyEventBase.html#method-i-logWithLevel","(level, label, *data)","<p>Itkのloggerによるログ出力 ItkUtility のものを override.\n<p><em>level</em>  &mdash; ログレベル。:trace, :debug, :info, :warn, :error, :fatal …\n"],["logWithLevel","RubyGateBase","RubyGateBase.html#method-i-logWithLevel","(level, label, *data)","<p>Itkのloggerによるログ出力 ItkUtility のものを override.\n<p><em>level</em>  &mdash; ログレベル。:trace, :debug, :info, :warn, :error, :fatal …\n"],["makeSymbolTerm","AgentFactoryBase","AgentFactoryBase.html#method-i-makeSymbolTerm","(str)","<p>文字列の java 内でのinternを行った Term を作る。 毎サイクルなど頻繁に呼び出すと、効率が悪い。(intern に時間かかる) なので、初回に1回呼ぶようにすべき。\n"],["new","AgentFactoryBase","AgentFactoryBase.html#method-c-new","(factory, config, fallback)","<p>初期化\n<p><em>agent</em> &mdash; Java の RubyAgent のインスタンス。\n<p><em>initOption</em> &mdash; 初期化のためのオプション引数。 generation file で指定できる。指定しなければ nil。\n"],["new","CrowdWalkWrapper","CrowdWalkWrapper.html#method-c-new","(simulator)","<p>初期化\n<p><em>simulator</em> &mdash; Java の EvacuationSimulator のインスタンス。\n\n"],["new","NetworkMap","NetworkMap.html#method-c-new","(mapObject)","<p>コンストラクタ\n<p><em>mapObject</em> &mdash; java 側のオブジェクトを渡す。\n\n"],["new","RubyAgentBase","RubyAgentBase.html#method-c-new","(agent, config, fallback)","<p>初期化\n<p><em>agent</em> &mdash; Java の RubyAgent のインスタンス。\n<p><em>initOption</em> &mdash; 初期化のためのオプション引数。 generation file で指定できる。指定しなければ nil。\n"],["new","RubyColorBase","RubyColorBase.html#method-c-new","()","<p>初期化\n"],["new","RubyEventBase","RubyEventBase.html#method-c-new","(_event)","<p>初期化。 設定等は、Ruby のデータに変換され、@eventDef で取得できる。\n<p><em>gate</em> &mdash; Gate の java インスタンス。\n\n"],["new","RubyGateBase","RubyGateBase.html#method-c-new","(_gate)","<p>初期化。 設定等は、Ruby のデータに変換され、@eventDef で取得できる。\n<p><em>gate</em> &mdash; Gate の java インスタンス。\n\n"],["newTerm","ItkTerm","ItkTerm.html#method-c-newTerm","(head = nil)","<p>作成\n"],["numOfExitAgentsFromNode","ItkUtility","ItkUtility.html#method-i-numOfExitAgentsFromNode","(node)","<p>ノードから exit したエージェントの数。\n"],["numOfPassedAgentsOverNode","ItkUtility","ItkUtility.html#method-i-numOfPassedAgentsOverNode","(node, simTime, margin = 1.5)","<p>直前サイクルにノードを通過したエージェントの数。\n<p><em>simTime</em> &mdash; 現在時刻（シミュレーション内時刻）\n\n"],["occur","RubyEventBase","RubyEventBase.html#method-i-occur","(currentTime, map)","<p>イベント発生。なにか再定義されないといけない。\n"],["placeAgent","AgentFactoryBase","AgentFactoryBase.html#method-i-placeAgent","()","<p>エージェントの初期位置を返す。 必要に応じて、子クラスで定義。\n"],["postUpdate","CrowdWalkWrapper","CrowdWalkWrapper.html#method-i-postUpdate","(simTime)","<p>update の最後に呼び出される。\n<p><em>simTime</em> &mdash; シミュレーション内相対時刻\n\n"],["preUpdate","CrowdWalkWrapper","CrowdWalkWrapper.html#method-i-preUpdate","(simTime)","<p>update の先頭で呼び出される。\n<p><em>simTime</em> &mdash; シミュレーション内相対時刻\n\n"],["preUpdate","RubyAgentBase","RubyAgentBase.html#method-i-preUpdate","()","<p>シミュレーション各サイクルの前半に呼ばれる。\n"],["prepareForSimulation","CrowdWalkWrapper","CrowdWalkWrapper.html#method-i-prepareForSimulation","()","<p>シミュレーション開始前の処理 AgentHandler の prepareForSimulation の後で呼び出される。\n"],["rebuildRoutes","CrowdWalkWrapper","CrowdWalkWrapper.html#method-i-rebuildRoutes","()","<p>経路情報の再構築。 各ノードの NavigationHints や、 各リンクの mentalLength を作り直す。 mentalLength に関係するタグなどのマップパラメータを修正した場合、 …\n"],["removeAgentTag","RubyAgentBase","RubyAgentBase.html#method-i-removeAgentTag","(tag)","<p>エージェントのタグを削除\n"],["runCycle","CwIrb","CwIrb.html#method-i-runCycle","(n = 1)","<p>run N cycle.\n<p><em>n</em> &mdash; cycle count to run the simulation.\n\n"],["runCycle","ItkIrb","ItkIrb.html#method-i-runCycle","(_n = 1)","<p>run N cycle.\n"],["saveAlert","RubyAgentBase","RubyAgentBase.html#method-i-saveAlert","(message, redundant = false)","<p>アラートを記憶。\n"],["setArg","ItkTerm","ItkTerm.html#method-c-setArg","(object, slot, value)","<p>ボディ変更\n<p><em>object</em>  &mdash; Java の Itk.Term\n<p><em>slot</em>  &mdash; スロット指定。String。\n"],["setEmptySpeed","RubyAgentBase","RubyAgentBase.html#method-i-setEmptySpeed","(speed)","<p>自由速度を設定\n<p><em>speed</em>  &mdash; 新しい自由速度。double に変換可能であること。\n\n"],["setGoal","RubyAgentBase","RubyAgentBase.html#method-i-setGoal","(goalTag)","<p>目的地設定\n<p><em>goalTag</em>  &mdash; 新しいゴールのタグ（String）\n\n"],["setHead","ItkTerm","ItkTerm.html#method-c-setHead","(object, head)","<p>ヘッド変更\n<p><em>object</em>  &mdash; Java の Itk.Term\n<p><em>head</em>  &mdash; atom のデータ。String, int, double, boolean\n"],["setInstance","CrowdWalkWrapper","CrowdWalkWrapper.html#method-c-setInstance","(wrapper)","<p>Wrapper の（唯一の）インスタンスへのを設定。\n"],["setNth","ItkTerm","ItkTerm.html#method-c-setNth","(object, index, value)","<p>配列要素変更\n<p><em>object</em>  &mdash; Java の Itk.Term\n<p><em>index</em>  &mdash; インデックス\n"],["setTurnAround","RubyAgentBase","RubyAgentBase.html#method-i-setTurnAround","()","<p>方向変換(turn around) 方向変換を予定する。 次の preUpdate() で反映される。 2回やっても、元には戻らない。（turn around がセットされるだけなので）\n"],["setupSimulationLoggers","CrowdWalkWrapper","CrowdWalkWrapper.html#method-i-setupSimulationLoggers","()","<p>シミュレーションの各種ログの設定。 ログの出力項目などをいじれる。 AgentHandler の setupSimulationLoggers() と initSimulationLoggers()の間によびだされる。 …\n"],["switchGate","RubyGateBase","RubyGateBase.html#method-i-switchGate","(event, closed)","<p>状態変化\n"],["thinkCycle","RubyAgentBase","RubyAgentBase.html#method-i-thinkCycle","()","<p>思考ルーチン\n"],["timeDiffInSec","AgentFactoryBase","AgentFactoryBase.html#method-i-timeDiffInSec","(time0, time1)","<p>時間の差分計算。(秒) time0 - time1 を求める。\n<p><em>time0</em>  &mdash; 後の時刻。SImTime のインスタンス。\n<p><em>time1</em>  &mdash; 前の時刻SImTime のインスタンス。\n"],["toRuby","ItkTerm","ItkTerm.html#method-c-toRuby","(object, deeply = true)",""],["toRubyFromArray","ItkTerm","ItkTerm.html#method-c-toRubyFromArray","(originalArray, deeply)",""],["toRubyFromHash","ItkTerm","ItkTerm.html#method-c-toRubyFromHash","(originalHash, deeply)",""],["tryUpdateAndGenerate","AgentFactoryBase","AgentFactoryBase.html#method-i-tryUpdateAndGenerate","()","<p>シミュレータからの呼び出しのトップレベル。 初回のみ initCycle () を呼び出し、その後、毎回、cycle () を呼び出す。\n"],["update","RubyAgentBase","RubyAgentBase.html#method-i-update","()","<p>シミュレーション各サイクルの後半に呼ばれる。\n<p><em>simTime</em> &mdash; 相対シミュレーション時刻\n\n"]]}}