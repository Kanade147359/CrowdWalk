#! /usr/bin/env ruby
## -*- mode: ruby -*-
## = summarize generation file
## Author:: Itsuki Noda
## Version:: 0.0 2017/04/19 I.Noda
##
## === History
## * [2017/04/19]: Create This File.
## * [YYYY/MM/DD]: add more
## == Usage
## * ...

require 'optparse' ;
require 'pp' ;
require 'json' ;
require 'time' ;
require 'csv' ;

$toolBaseDir = File::dirname(__FILE__) ;

$LOAD_PATH.push("#{$toolBaseDir}/./RubyLib");

require 'WithConfParam' ;


#------------------------------------------------------------------------
#++
$conf = {
  :totalLabel => ":total",
  :fromLabel => ":from",
  :toLabel => ":to",
  :outfile => nil,
  :quietP => false,
} ;

#------------------------------------------------------------------------
$op = OptionParser.new() {|op|
  op.banner = <<_END_
  Usage: #{$0} [Options]* <generationFile>
  Read CrowdWalk's generation file and output summary of rules.
_END_

  op.separator("Options:") ;
  op.set_summary_indent("") ;
  op.set_summary_width(60) ;
  sep = "\n\t\t" ;

  op.on("-o","--output OutFile", String, sep + "output file.") {|outfile|
    $conf[:outfile] = outfile ;
  }
  op.on("-q","--quiet", sep + "suppress verbose outputs.") {
    $conf[:quietP] = true ;
  }
  op.on_tail("--help", sep + "show this message.") { |h|
    puts(op)
    exit(1)
  }
}

$op.parse!(ARGV) ;
$restArg = ARGV ;
if ($restArg.length < 1) then
  puts($op) ;
  exit(1) ;
end

p [:rest, ARGV], [:conf,$conf] if !$conf[:quietP] ;

#--======================================================================
#++
## Information of a grid
class RuleSummary
  #--@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  #++
  ## rule list
  attr_accessor :ruleList ;
  ## total population
  attr_accessor :totalPopulation ;
  ## sum table of population from start place
  attr_accessor :populationFrom ;
  ## sum table of population toward goal place
  attr_accessor :populationTo ;

  #--------------------------------------------------------------
  #++
  ## initialization.
  ## _rules_:: rule list
  def initialize(_ruleList = nil)
    @ruleList = ruleList ;
  end

  #--------------------------------------------------------------
  #++
  ## read rule file
  ## _filename_:: filename of generation file
  def readRulesFromFile(filename)
    open(filename, "r"){|strm|
      readRulesFromStream(strm) ;
    }
  end

  #--------------------------------------------------------------
  #++
  ## read rule from stream
  ## _strm_:: stream of generation rules
  def readRulesFromStream(strm)
    skipModeLine(strm) ;
    @ruleList = JSON::Parser.new(strm.read).parse ;
  end

  #--------------------------------------------------------------
  #++
  ## skip mode line
  ## _strm_:: stream of generation rules
  def skipModeLine(strm)
    c = strm.getc() ;
    if(c == '#') then
      strm.gets() ;
    else
      strm.ungetc(c)
    end
  end

  #--------------------------------------------------------------
  #++
  ## scan rule list
  def scanRuleList()
    resetSummary() ;
    @ruleList.each{|rule|
      scanRule(rule) ;
    }
  end

  #--------------------------------------------------------------
  #++
  ## reset summary
  def resetSummary()
    @totalPopulation = 0 ;
    @populationFrom = {} ;
    @populationTo = {} ;
  end
  
  #--------------------------------------------------------------
  #++
  ## scan one rule
  def scanRule(rule)
    case(rule["rule"])
    when "EACH"
      population = rule["total"] ;
      start = rule["startPlace"]
      goal = rule["goal"] ;
      @totalPopulation += population ;
      @populationFrom[start] = @populationFrom[start].to_i + population ;
      @populationTo[goal] = @populationTo[goal].to_i + population ;
    end
  end
  
  #--------------------------------------------------------------
  #++
  ## output summary to file
  ## _outfile_ : filename to output. If nil, output to stdout.
  def outputSummary(outfile = nil, conf = $conf)
    summary = genSummary(conf) ;
    if(outfile.nil?)
      puts summary ;
    else
      open(outfile,"w") { |strm|
        strm << summary ;
      }
    end
  end
  
  #--------------------------------------------------------------
  #++
  ## generate summary string in CSV format
  def genSummary(conf)
    summary = CSV.generate() {|csv|
      csv << [conf[:totalLabel], @totalPopulation] ;
      @populationFrom.each{|place, population|
        csv << [conf[:fromLabel], place, population] ;
      }
      @populationTo.each{|place, population|
        csv << [conf[:toLabel], place, population] ;
      }
    }
    return summary ;
  end

  #--============================================================
  #--::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
  #--@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  #--------------------------------------------------------------
end # class RuleSummary

########################################################################
########################################################################
########################################################################

summary = RuleSummary.new() ;
summary.readRulesFromFile($restArg[0]) ;
summary.scanRuleList() ;
summary.outputSummary($conf[:outfile], $conf) ;
