/**
 * build.gradle
 *  generates executable jar using Gradle.
 */

import org.apache.tools.ant.filters.ReplaceTokens

defaultTasks 'clean', 'build'

apply plugin: 'java'
apply plugin: 'eclipse'

repositories {
    mavenCentral()
}

dependencies {
    compile localGroovy()   // Gradleに同梱されているGroovyを使う
    compile 'commons-cli:commons-cli:1.2'
    compile 'xalan:xalan:2.7.0'
    compile 'net.arnx:jsonic:1.3.7'
    compile 'net.sf.opencsv:opencsv:2.3'
    compile 'junit:junit:4.12'
    compile fileTree(dir: 'libs/jar', include: '*.jar')

    runtime fileTree(dir: 'libs/windows/amd64', include: '*.dll')
    runtime fileTree(dir: 'libs/windows/i386', include: '*.dll')
    runtime fileTree(dir: 'libs/linux/amd64', include: '*.so')
    runtime fileTree(dir: 'libs/linux/i386', include: '*.so')
    runtime fileTree(dir: 'libs/macosx', include: '*.jnilib')
}

sourceSets {
    main {
        java {
        }
    }
}

def defaultEncoding = 'UTF-8'

compileJava {
    options.encoding = defaultEncoding
}

processResources {
    doFirst {
        // バージョン番号を生成してリソースファイルにセットする
        def version = new File("version.txt").getText().trim()
        def branch = "git rev-parse --abbrev-ref HEAD".execute().text.trim()
        def revision = 0
        "git rev-list HEAD".execute().in.eachLine { revision++ }
        def commit_hash = "git rev-parse --short HEAD".execute().text.trim()

        filesMatching("netmas.properties") {
            filter(ReplaceTokens, tokens: ['version': version])
            filter(ReplaceTokens, tokens: ['branch': branch])
            filter(ReplaceTokens, tokens: ['revision': "" + revision])
            filter(ReplaceTokens, tokens: ['commit_hash': commit_hash])
        }
        println "    version -> ${version}.${branch}.${revision}-${commit_hash}"
    }
}

jar {
    manifest.mainAttributes("Main-Class" : "nodagumi.ananPJ.SystemLauncher")
    doFirst {
        from (configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }) {
            exclude 'META-INF/MANIFEST.MF'
            exclude 'META-INF/*.SF'
            exclude 'META-INF/*.DSA'
            exclude 'META-INF/*.RSA'
        }
    }
}

task clearCache() {
    doFirst {
        File f = file("${System.getProperty("user.home")}/.gradle/cache/${project.group}/${project.name}")
        println("Deleting gradle cache at ${f.absolutePath}")
        delete(f)
    }
}

/* [2015.01.28 I.Noda] gradle でトラブルと、どうもここが怪しい。
 * なので、いざという時、クリアできるようにしておく。
 */
task cleanAll {
     doFirst {
       File f = file("./.gradle") ;
       println("deleting ${f.absolutePath}") ;
       delete(f) ;
     }
}
