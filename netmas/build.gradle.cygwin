/**
 * build.gradle
 *  generates executable jar using Gradle.
 */

import org.apache.tools.ant.taskdefs.condition.Os

defaultTasks 'clean', 'build'
// defaultTasks 'build','javadoc','groovydoc'

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'application'
apply plugin: 'eclipse'

repositories {
    /*mavenRepo urls: 'http://download.osgeo.org/webdav/geotools'*/


    mavenCentral()
}



dependencies {
    groovy group: 'org.codehaus.groovy', name: 'groovy', version: '1.7.0'
    groovy group: 'commons-cli', name: 'commons-cli', version: '1.2'

    compile group: 'xalan', name: 'xalan', version: '2.7.0'

    compile fileTree(dir: 'libs/jar', include: '*.jar')
    compile fileTree(dir: 'libs/jar', include: 'vecmath.jar')
    compile fileTree(dir: 'libs/jar', include: '.SM.gul.vecmath.jar')

    runtime fileTree(dir: 'libs/windows/amd64', include: '*.dll')
    runtime fileTree(dir: 'libs/windows/i386', include: '*.dll')
    runtime fileTree(dir: 'libs/linux/amd64', include: '*.so')
    runtime fileTree(dir: 'libs/linux/i386', include: '*.so')
    runtime fileTree(dir: 'libs/macosx', include: '*.jnilib')
}

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"];
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                exclude '**/ImportGis.java'
            }
        }
        groovy {
            srcDirs = ["src/main/groovy"];
        }
        compileClasspath = configurations.compile
        runtimeClasspath = configurations.runtime
    }
}

def defaultEncoding = 'UTF-8'


compileJava {
    options.encoding = defaultEncoding

}

























jar {









    //from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }







    doFirst {
        from (configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }) {
            exclude 'META-INF/MANIFEST.MF'
            exclude 'META-INF/*.SF'
            exclude 'META-INF/*.DSA'
            exclude 'META-INF/*.RSA'
        }
    }

}






















mainClassName = 'main'
manifest.mainAttributes("Main-Class" : "main")
//manifest.mainAttributes("Main-Class" : "nodagumi.ananPJ.NetworkMapEditor")

