#! /usr/bin/env ruby
## -*- mode: ruby -*-
## = Itk Template for Ruby
## Author:: Itsuki Noda
## Version:: 0.0 2015/03/21 I.Noda
##
## === History
## * [2015/03/21]: Create This File.
## * [YYYY/MM/DD]: add more
## == Usage
## * ...

$LOAD_PATH.push("./RubyLib");

require 'optparse' ;
require 'ostruct' ;
require 'pp' ;

require 'ItkXml.rb' ;

#------------------------------------------------------------------------
#++
$conf =
  OpenStruct.new({
                   :foo => false,
                   :bar => 1,
                   :baz => "test",
                 }) ;

#------------------------------------------------------------------------
#++
$op = OptionParser.new() {|op|
  op.banner = <<_END_
  Usage: #{$0} [Options]*
_END_

  op.separator("Options:") ;
  op.set_summary_indent("") ;
  op.set_summary_width(60) ;
  sep = "\n\t\t" ;

  op.on("-f","--[no-]foo", sep + "switch foo.") {|foo|
    $conf.foo = foo ;
  }
  op.on("-b","--bar BarVal", Integer, sep + "bar int value.") {|bar|
    $conf.bar = bar ;
  }
  op.on("-z","--baz BazVal", String, sep + "baz str value.") {|baz|
    $conf.baz = baz ;
  }
  op.on_tail("--help", sep + "show this message.") { |h|
    puts(op)
    exit(1)
  }
}

$op.parse!(ARGV) ;
$restArg = ARGV ;
p [:rest, ARGV], [:conf,$conf] ; 

#--======================================================================
#++
## Node class for Map
class MapNode
  #--::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
  #++
  ## tag name of XML element
  XmlElementTag = "Node" ;

  #--@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  #++
  ## id
  attr :id, true ;
  ## x-y pos
  attr :pos, true ;
  ## height
  attr :height, true ;
  ## link list
  attr :linkList, true ;
  ## tag list
  attr :tagList, true ;

  #--------------------------------------------------------------
  #++
  ## description of method initialize
  def initialize(id = 0, pos = Geo2D::Point.new(), height = 0.0)
    @pos = Geo2D::Point.new() ;
    @linkList = [] ;
    @tagList = [] ;
    setId(id) ;
    setPos(pos) ;
    setHeight(height) ;
  end

  #--------------------------------------------------------------
  #++
  ## set ID
  ## _id_:: ID
  ## *return*:: self
  def setId(id)
    @id = id ;
    return self ;
  end
  #--------------------------------------------------------------
  #++
  ## set pos
  ## _pos_:: position in Geo2D::Point 
  ## *return*:: self
  def setPos(pos)
    return setXY(pos.x, pos.y) ;
  end

  #--------------------------------------------------------------
  #++
  ## set XY pos
  ## _x_:: X position
  ## _y_:: Y position
  ## *return*:: self
  def setXY(x, y)
    @pos.set(x, y) ;
    return self ;
  end

  #--------------------------------------------------------------
  #++
  ## set height
  ## _height_:: height
  ## *return*:: self
  def setHeight(height)
    @height = height ;
    return self ;
  end

  #--------------------------------------------------------------
  #++
  ## add link
  ## _link_:: an instance of MapLink
  ## *return*:: self
  def addLink(link)
    @linkList.push(link) ;
    return self ;
  end

  #--------------------------------------------------------------
  #++
  ## add tag
  ## _tag_:: tag string
  ## *return*:: self
  def addTag(tag)
    @tagList.push(tag) ;
    return self ;
  end

  #--------------------------------------------------------------
  #++
  ## gen Arrayed Xml
  ## *return*:: arrayed xml
  def toArrayedXml()
    # head part
    axml = [[nil, XmlElementTag, ({ :id => @id,
                                    :x => @pos.x,
                                    :y => @pos.y,
                                    :height => @height })]] ;
    ## tag part
    @tagList.each{|tag|
      axml.push([:tag, tag]) ;
    }

    ## link part
    @linkList.each{|link|
      axml.push([[nil, :link, { :id => link.id } ]]) ;
    }

    return axml ;
  end

end # class MapNode

#--======================================================================
#++
## Link class for Map
class MapLink
  #--::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
  #++
  ## tag name of XML element
  XmlElementTag = "Link" ;

  #--@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  #++
  ## id
  attr :id, true ;
  ## from Node
  attr :fromNode, true ;
  ## to Node
  attr :toNode, true ;
  ## length
  attr :length, true ;
  ## width
  attr :width, true ;
  ## tag list
  attr :tagList, true ;

  #--------------------------------------------------------------
  #++
  ## description of method initialize
  def initialize(id = 0, fromNode = nil, toNode = nil, width = 0.0)
    @tagList = [] ;
    setId(id) ;
    setFromToNode(fromNode, toNode) ;
    setWidth(width) ;
  end

  #--------------------------------------------------------------
  #++
  ## set ID
  ## _id_:: ID
  ## *return*:: self
  def setId(id)
    @id = id ;
    return self ;
  end

  #--------------------------------------------------------------
  #++
  ## set from and to Node
  ## _fromNode_:: from MapNode
  ## _toNode_:: to MapNode
  ## *return*:: self
  def setFromToNode(fromNode, toNode)
    @fromNode = fromNode ;
    @toNode = toNode ;
    if(@fromNode && @toNode) then
      setLength(@fromNode.pos.distanceTo(@toNode.pos)) ;
    end
    @fromNode.addLink(self) ;
    @toNode.addLink(self) ;
    return self ;
  end

  #--------------------------------------------------------------
  #++
  ## set width
  ## _width_:: width
  ## *return*:: self
  def setWidth(width)
    @width = width ;
    return self ;
  end

  #--------------------------------------------------------------
  #++
  ## set width
  ## _width_:: width
  ## *return*:: self
  def setLength(length)
    @length = length ;
    return self ;
  end

  #--------------------------------------------------------------
  #++
  ## add tag
  ## _tag_:: tag string
  ## *return*:: self
  def addTag(tag)
    @tagList.push(tag) ;
    return self ;
  end

  #--------------------------------------------------------------
  #++
  ## gen Arrayed Xml
  ## *return*:: arrayed xml
  def toArrayedXml()
    # head part
    axml = [[nil, XmlElementTag, ({ :id => @id,
                                    :from => @fromNode.id,
                                    :to => @toNode.id,
                                    :length => @length,
                                    :width => @width })]] ;
    ## tag part
    @tagList.each{|tag|
      axml.push([:tag, tag]) ;
    }

    return axml ;
  end

end # class MapLink

#--======================================================================
#++
## Town class for Map
class MapTown
  #--::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
  #++
  ## tag name of XML element
  XmlElementTag = "Group" ;

  #--@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  #++
  ## id
  attr :id, true ;
  ## max id for node/link objects
  attr :maxId, true ;
  ## default height
  attr :defaultHeight, true ;
  ## imageFileName
  attr :imageFileName, true ;
  ## max height
  attr :maxHeight, true ;
  ## min height
  attr :minHeight, true ;
  ## NorthWest point (Geo2D::Point)
  attr :northWestCorner, true ;
  ## SouthEast point (Geo2D::Point)
  attr :southEastCorner, true ;
  ## theta
  attr :pTheta, true ;
  ## r
  attr :r, true ;
  ## scale
  attr :scale, true ;
  ## s point (?)
  attr :sPoint, true ;
  ## t point (?)
  attr :tPoint, true ;
  ## tag list
  attr :tagList, true ;
  ## node list
  attr :nodeList, true ;
  ## link list
  attr :linkList, true ;
  ## object table (table for id => node/link object)
  attr :objectTable, true ;

  #--------------------------------------------------------------
  #++
  ## description of method initialize
  def initialize(id = 0, defaultHeight = 0.0)
    @tagList = [] ;
    @nodeList = [] ;
    @linkList = [] ;
    @objectTable = {} ;

    @imageFileName = "" ;
    @maxHeight = nil ;
    @minHeight = nil ;
    @northWestCorner = Geo2D::Point.new() ;
    @southEastCorner = Geo2D::Point.new() ;
    @pTheta  = 0.0 ;
    @r = 0.0 ;
    @scale = 1.0 ;
    @sPoint = Geo2D::Point.new(1.0, 1.0) ;
    @tPoint = Geo2D::Point.new(0.0, 0.0) ;
    setId(id) ;
    @maxId = @id ;
    @defaultHeight = defaultHeight ;

    addObject(self) ;
  end

  #--------------------------------------------------------------
  #++
  ## set ID
  ## _id_:: ID
  ## *return*:: self
  def setId(id)
    @id = id ;
    return self ;
  end

  #--------------------------------------------------------------
  #++
  ## add object
  def addObject(object)
    @objectTable[object.id] = object ;
    return object ;
  end

  #--------------------------------------------------------------
  #++
  ## new node
  def newNode(pos, height = @defaultHeight)
    @maxId += 1 ;
    node = MapNode.new(@maxId, pos, height) ;
    @nodeList.push(node) ;
    addObject(node) ;
    return node ;
  end

  #--------------------------------------------------------------
  #++
  ## new link
  def newLink(fromNode, toNode, width)
    @maxId += 1 ;
    link = MapLink.new(@maxId, fromNode, toNode, width) ;
    @linkList.push(link) ;
    addObject(link) ;
    return link ;
  end

  #--------------------------------------------------------------
  #++
  ## setup max/min height
  def setupMinMaxHeight()
    @maxHeight = nil ;
    @minHeight = nil ;
    @nodeList.each{|node|
      if(@maxHeight.nil? || @maxHeight < node.height) then
        @maxHeight = node.height ;
      end
      if(@minHeight.nil? || @minHeight > node.height) then
        @minHeight = node.height ;
      end
    }
  end

  #--------------------------------------------------------------
  #++
  ## setup boundary box
  def setupBoundaryBox()
    setupMinMaxHeight() ;

    @northWestCorner = @nodeList.first.pos.dup ;
    @southEastCorner = @nodeList.first.pos.dup ;
    @nodeList.each{|node|
      @northWestCorner.x = node.pos.x if(@northWestCorner.x > node.pos.x) ;
      @northWestCorner.y = node.pos.y if(@northWestCorner.y > node.pos.y) ;
      @southEastCorner.x = node.pos.x if(@southEastCorner.x < node.pos.x) ;
      @southEastCorner.y = node.pos.y if(@southEastCorner.y < node.pos.y) ;
    }
  end

  #--------------------------------------------------------------
  #++
  ## gen Arrayed Xml
  ## *return*:: arrayed xml
  def toArrayedXml()
    setupBoundaryBox() ;
    # head part
    axml = [[nil, XmlElementTag,
             ({ :id => @id,
                :imageFileName => @imageFileName,
                :defaultHeight => @defaultHeight,
                :maxHeight => @maxHeight,
                :minHeight => @minHeight,
                :pNorthWestX => @northWestCorner.x,
                :pNorthWestY => @northWestCorner.y,
                :pSouthEastX => @southEastCorner.x,
                :pSouthEastY => @southEastCorner.y,
                :pTheta => @pTheta,
                :r => @r,
                :scale => @scale,
                :sx => @sPoint.x,
                :sy => @sPoint.y,
                :tx => @tPoint.x,
                :ty => @tPoint.y })]] ;
    ## tag part
    @tagList.each{|tag|
      axml.push([:tag, tag]) ;
    }

    ## node part
    @nodeList.each{|node|
      axml.push(node.toArrayedXml()) ;
    }

    ## link part
    @linkList.each{|link|
      axml.push(link.toArrayedXml()) ;
    }

    return axml ;
  end

end # class MapTown

########################################################################
########################################################################
########################################################################

town = MapTown.new() ;

node0 = town.newNode(Geo2D::Point.new(10.0,15.0)) ;
node0.addTag("foo") ;
node0.addTag("bar") ;

node1 = town.newNode(Geo2D::Point.new(20.0,25.0)) ;
node1.addTag("aho") ;
node1.addTag("baka") ;

link2 = town.newLink(node0, node1, 1.0) ;
link2.addTag("bbb") ;
link2.addTag("123") ;

axml = town.toArrayedXml() ;
p axml ;
xml = ItkXml.to_Xml(axml) ;
ItkXml::ppp(xml) ;

