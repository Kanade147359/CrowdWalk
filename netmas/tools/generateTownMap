#! /usr/bin/env ruby
## -*- mode: ruby -*-
## = Itk Template for Ruby
## Author:: Itsuki Noda
## Version:: 0.0 2015/03/21 I.Noda
##
## === History
## * [2015/03/21]: Create This File.
## * [YYYY/MM/DD]: add more
## == Usage
## * ...

$LOAD_PATH.push("./RubyLib");

require 'optparse' ;
require 'ostruct' ;
require 'pp' ;

require 'ItkXml.rb' ;
require 'GridTown.rb' ;

#------------------------------------------------------------------------
#++
$conf =
  OpenStruct.new({ :outFile => nil,
                   :townType => :grid,
                   :gridConf => GridTown::DefaultConf.dup,
                   :pruneN => 0,
                   }) ;

#------------------------------------------------------------------------
#++
$op = OptionParser.new() {|op|
  op.banner = <<_END_
  Usage: #{$0} [Options]*
_END_

  op.separator("Options:") ;
  op.set_summary_indent("") ;
  op.set_summary_width(60) ;
  sep = "\n\t\t" ;

  op.on("-o FILE", "--out FILE", String, sep + "output file.") {|file|
    p file ;
    $conf.outFile = ((file == "-") ? nil : file) ;
  }
  op.on("--grid", sep + "generate grid town.") {
    $conf.townType = :grid ;
  }
  op.on("--gridLength LENGTH", Float, sep + "[grid] unit grid length.") {|len|
    $conf.gridConf[:gridLength] = len ;
  }
  op.on("--sizeX X", Integer, sep + "[grid] size X.") {|size|
    $conf.gridConf[:sizeX] = size ;
  }
  op.on("--sizeY Y", Integer, sep + "[grid] size Y.") {|size|
    $conf.gridConf[:sizeY] = size ;
  }
  op.on("--lineWidth WIDTH", Float, sep + "[grid] line weidth.") {|width|
    $conf.gridConf[:lineWidth] = width ;
  }
  op.on("--randomSize SIZE", Float, sep + "[grid] line weidth.") {|random|
    $conf.gridConf[:randomSize] = random ;
  }
  op.on("--pruneN N", Integer, sep + "[grid] line weidth.") {|n|
    $conf.pruneN = n ;
  }
  op.on_tail("--help", sep + "show this message.") { |h|
    puts(op)
    exit(1)
  }
}

$op.parse!(ARGV) ;
$restArg = ARGV ;
p [:rest, ARGV], [:conf,$conf] ;

########################################################################
########################################################################
########################################################################

town = nil ;

case($conf.townType)
when :grid ;
  town = GridTown.new($conf.gridConf) ;
else
  raise "unknown town type:" + $conf.type ;
end

town.pruneLinks($conf.pruneN) ;

if($conf.outFile.nil?) then
  $stdout << town.to_XmlString() ;
else
  open($conf.outFile,"w"){|strm|
    strm <<  town.to_XmlString() ;
  }
end

